import React from 'react';
import axios from 'axios';
import Table from './table'; // Importe o componente Table

class Uploader extends React.Component {
  constructor(props) {
    super(props);

    this.state = {
      file: null,
      errorMessage: null,
      successMessage: null,
      loading: false,
      detailedResult: null,
      showModal: false, // Adicione a propriedade showModal no estado
    };
  }

  handleFileChange = async (e) => {
    const selectedFile = e.target.files[0];

    this.setState({
      file: selectedFile,
      detailedResult: null,
      errorMessage: null,
      successMessage: null,
    });

    if (selectedFile) {
      await this.fetchData(selectedFile);
    }
  };

  fetchData = async (file) => {
    try {
      const apiUrl = 'http://localhost:5001/upload';
      const apiKey = '';

      this.setState({ loading: true });

      const formData = new FormData();
      formData.append('file', file);

      const response = await axios.post(apiUrl, formData, {
        headers: {
          'Content-Type': 'multipart/form-data',
          'x-apikey': apiKey,
        },
      });

      if (response.data && response.data.analysis_id) {
        await this.fetchAnalysisDetails(response.data.analysis_id);
      } else {
        this.setState({ errorMessage: 'Erro ao receber resposta do servidor.' });
      }
    } catch (error) {
      console.error('Erro ao enviar arquivo para o servidor:', error.message);
      this.setState({
        errorMessage: 'Erro ao enviar arquivo para o servidor. Verifique sua conexão ou tente novamente.',
        loading: false,
      });
    }
  };

  fetchAnalysisDetails = async (analysisId) => {
    try {
      const apiUrl = `https://www.virustotal.com/api/v3/analyses/${analysisId}`;
      const apiKey = '';

      let response = await axios.get(apiUrl, {
        headers: {
          'x-apikey': apiKey,
          'accept': 'application/json',
        },
      });

      while (response.data.data.attributes.status === "queued" || response.data.data.attributes.status === "in-progress") {
        await new Promise(resolve => setTimeout(resolve, 5000));
        response = await axios.get(apiUrl, {
          headers: {
            'x-apikey': apiKey,
            'accept': 'application/json',
          },
        });
      }

      const analysisData = response.data.data;
      const results = analysisData.attributes.results;

      if (results && typeof results === 'object') {
        const columns = [
          { Header: 'Antivírus', accessor: 'engine_name' },
          { Header: 'Método', accessor: 'method' },
          { Header: 'Versão do AV', accessor: 'engine_version' },
          { Header: 'Resultado', accessor: 'result' }
        ];

        // Mapeie todos os resultados no formato adequado para a tabela
        const data = Object.keys(results).map((engineName) => {
          const result = results[engineName].result;

          // Altera 'Null' para 'Não Detectado'
          if (result === null) {
            results[engineName].result = 'Não Detectado';
          }

          return {
            ...results[engineName],
            engine_name: engineName,
          };
        })  
        

        // Verifica se algum resultado é diferente de null para definir a cor
        const isResultNotNull = data.some(row => row.result !== null);

        this.setState({ detailedResult: { columns, data }, loading: false });

        // Se houver algum resultado não nulo, mostra a tabela imediatamente
        if (isResultNotNull) {
          this.toggleModal();
        }
      } else {
        this.setState({ errorMessage: 'Resultados ausentes ou inválidos na resposta do VirusTotal.', loading: false });
      }
    } catch (error) {
      console.error('Erro ao obter detalhes da análise do VirusTotal:', error);
      this.setState({ errorMessage: 'Erro ao obter detalhes da análise.', loading: false });
    }
  };

  // Adicione a função toggleModal
  toggleModal = () => {
    this.setState((prevState) => ({
      showModal: !prevState.showModal,
    }));
  };

  render() {
    const { loading, errorMessage, successMessage, detailedResult, showModal } = this.state;

    return (
      <div>
        <input type="file" onChange={this.handleFileChange} />
        {loading && <p style={{ color: 'green' }}>Carregando...</p>}
        {errorMessage && <p style={{ color: 'red' }}>{errorMessage}</p>}
        {successMessage && <p style={{ color: 'green' }}>{successMessage}</p>}

        {/* Renderize o componente Table passando detailedResult como propriedade */}
        <Table detailedResult={detailedResult} showModal={showModal} toggleModal={this.toggleModal} />
      </div>
    );
  }
}

export default Uploader;

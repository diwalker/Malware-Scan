/* eslint-disable react/prop-types */
import React from 'react';
import '../styles/modal.css'; // Importe um arquivo de estilo para a modal
import '../styles/table.css';

class Table extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      showModal: false,
    };
  }

  toggleModal = () => {
    this.setState((prevState) => ({
      showModal: !prevState.showModal,
    }));
  };

  renderTable() {
    const { detailedResult } = this.props;

    if (!detailedResult) {
      return <div></div>;
    }

    const { columns, data } = detailedResult;

    // Separe os resultados nulos dos não nulos
    const nonNullResults = data.filter(item => item.result !== null);

    // Ordenar os resultados não nulos com função de comparação personalizada
    const sortedNonNullResults = [...nonNullResults].sort((a, b) =>
      customCompare(a.result, b.result)
    );

    // Mapear todos os resultados, substituindo os não nulos ordenados
    const sortedData = data.map(item =>
      item.result !== null ? sortedNonNullResults.shift() : item
    );

    return (
      <div>
        <button id="btnResultado" onClick={this.toggleModal}>
          Resultados
        </button>
        {this.state.showModal && (
          <div className="modal-overlay">
            <div className="modal">
              <button className="close-button" onClick={this.toggleModal}>
                Fechar
              </button>
                <div className="table-wrapper"> 
                  <table  style={{ width: '100%', borderCollapse: 'collapse' }}>
                    <thead>
                      <tr style={{ borderBottom: '2px solid black' }}>
                        {columns.map((column) => (
                          <th
                            key={column.Header}
                            style={{ padding: '10px', color: 'red' }}
                          >
                            {column.Header}
                          </th>
                        ))}
                      </tr>
                    </thead>
                    <tbody>
                      {sortedData.map((row, index) => (
                        <tr
                          key={index}
                          style={{ borderBottom: '1px solid #ddd' }}
                        >
                          {columns.map((column) => (
                            <td
                              key={column.accessor}
                              style={{ padding: '10px', textAlign: 'center' }}
                            >
                              {row[column.accessor]}
                            </td>
                          ))}
                        </tr>
                      ))}
                    </tbody>
                  </table>
                </div>
            </div>
          </div>
        )}
      </div>
    );
  }

  render() {
    return <div>{this.renderTable()}</div>;
  }
}

// Função de comparação personalizada
function customCompare(a, b) {
  // Se a string começar com "N", mova para o final
  if (a.startsWith("N") && !b.startsWith("N")) {
    return 1;
  }
  // Se b string começar com "N", mova para o início
  if (!a.startsWith("N") && b.startsWith("N")) {
    return -1;
  }
  // Caso contrário, compare normalmente
  return a.localeCompare(b);
}

export default Table;
